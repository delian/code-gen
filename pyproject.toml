[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "ofdm-chirp-generator"
version = "0.1.0"
description = "A GPU-accelerated OFDM signal generator that creates signals with chirp-modulated subcarriers"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "OFDM Chirp Generator Team"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering",
]
requires-python = ">=3.9"
dependencies = [
    "numpy>=1.21.0",
    "dynaconf>=3.2.0",
    "matplotlib>=3.9.4",
    "psutil>=7.1.0",
    "jinja2>=3.1.6",
]

[project.optional-dependencies]
gpu = [
    "cupy-cuda11x>=11.0.0; sys_platform != 'darwin'",
    "cupy-cuda12x>=12.0.0; sys_platform != 'darwin'",
]
visualization = [
    "matplotlib>=3.5.0",
]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=5.0.0",
    "mypy>=1.0.0",
]
all = [
    "ofdm-chirp-generator[gpu,visualization,dev]",
]

[project.urls]
Homepage = "https://github.com/your-org/ofdm-chirp-generator"
Repository = "https://github.com/your-org/ofdm-chirp-generator"
Documentation = "https://ofdm-chirp-generator.readthedocs.io"
Issues = "https://github.com/your-org/ofdm-chirp-generator/issues"

[project.scripts]
ofdm-demo = "examples.ofdm_generator_demo:main"

[tool.hatch.build.targets.wheel]
packages = ["ofdm_chirp_generator"]

[tool.hatch.build.targets.sdist]
include = [
    "/ofdm_chirp_generator",
    "/tests",
    "/examples",
    "/README.md",
    "/LICENSE",
]

# UV-specific configuration
[tool.uv]
dev-dependencies = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=5.0.0",
    "mypy>=1.0.0",
]

# Note: UV scripts are not yet supported in this UV version
# Use the development script instead: python scripts/dev.py <command>

# Testing configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "gpu: marks tests that require GPU (deselect with '-m \"not gpu\"')",
    "integration: marks tests as integration tests",
    "performance: marks tests as performance benchmarks",
]

# Code formatting with Black
[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Import sorting with isort
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# Type checking with mypy
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "cupy.*",
    "matplotlib.*",
]
ignore_missing_imports = true

# Coverage configuration
[tool.coverage.run]
source = ["ofdm_chirp_generator"]
omit = [
    "*/tests/*",
    "*/examples/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
