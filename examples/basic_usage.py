#!/usr/bin/env python3
"""
Basic usage example for OFDM Chirp Generator.

This example demonstrates how to create and validate OFDM and chirp configurations.
"""

from datetime import datetime

import numpy as np

from ofdm_chirp_generator import ChirpConfig, ConfigValidator, OFDMConfig, SignalSet


def main():
    """Demonstrate basic usage of the OFDM chirp generator data models."""

    print("OFDM Chirp Generator - Basic Usage Example")
    print("=" * 50)

    # Create a valid OFDM configuration
    print("\n1. Creating OFDM Configuration...")
    ofdm_config = OFDMConfig(
        num_subcarriers=64,
        subcarrier_spacing=15000.0,  # 15 kHz
        bandwidth_per_subcarrier=12000.0,  # 12 kHz
        center_frequency=2.4e9,  # 2.4 GHz
        sampling_rate=30.72e6,  # 30.72 MHz
        signal_duration=0.001,  # 1 ms
    )
    print(f"✓ OFDM Config created: {ofdm_config.num_subcarriers} subcarriers")

    # Create a chirp configuration
    print("\n2. Creating Chirp Configuration...")
    num_signals = 4
    phase_matrix = np.random.uniform(0, 2 * np.pi, (num_signals, ofdm_config.num_subcarriers))

    chirp_config = ChirpConfig(chirp_length=1000, phase_matrix=phase_matrix, amplitude=1.0)
    print(f"✓ Chirp Config created: {chirp_config.chirp_length} samples per chirp")

    # Validate parameter compatibility
    print("\n3. Validating Parameter Compatibility...")
    try:
        ConfigValidator.validate_parameter_compatibility(ofdm_config, chirp_config)
        print("✓ Configurations are compatible")
    except Exception as e:
        print(f"✗ Validation error: {e}")
        return

    # Create a mock signal set
    print("\n4. Creating Signal Set...")
    # Generate some mock signals (normally these would be generated by the signal generator)
    signal_length = int(ofdm_config.sampling_rate * ofdm_config.signal_duration)
    mock_signals = [
        np.random.randn(signal_length) + 1j * np.random.randn(signal_length)
        for _ in range(num_signals)
    ]

    signal_set = SignalSet(
        signals=mock_signals,
        phases=phase_matrix,
        orthogonality_score=0.95,
        generation_timestamp=datetime.now(),
        config=ofdm_config,
        metadata={"generator_version": "0.1.0", "optimization_method": "brute_force"},
    )

    print(f"✓ Signal Set created: {signal_set.num_signals} signals")
    print(f"  - Signal length: {signal_set.signal_length} samples")
    print(f"  - Orthogonality score: {signal_set.orthogonality_score:.3f}")

    # Demonstrate signal access
    print("\n5. Accessing Individual Signals...")
    for i in range(min(3, signal_set.num_signals)):  # Show first 3 signals
        signal = signal_set.get_signal(i)
        power = np.mean(np.abs(signal) ** 2)
        print(f"  Signal {i}: Power = {power:.6f}")

    print("\n6. Configuration Summary...")
    print(
        f"  Total bandwidth: {ofdm_config.num_subcarriers * ofdm_config.subcarrier_spacing / 1e6:.2f} MHz"
    )
    print(f"  Nyquist limit: {ofdm_config.sampling_rate / 2 / 1e6:.2f} MHz")
    print(f"  Signal duration: {ofdm_config.signal_duration * 1000:.1f} ms")
    print(f"  Samples per signal: {signal_length}")

    print("\n✓ Example completed successfully!")


if __name__ == "__main__":
    main()
